{
  "name": "mtr-match",
  "author": {
    "name": "Josh-Ryan Davis",
    "email": "joshryandavis@me.com"
  },
  "version": "0.0.4",
  "license": "MIT",
  "main": "lib/match.js",
  "directories": {
    "lib": "./lib"
  },
  "dependencies": {
    "underscore": "*",
    "meteor-ejson": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jrdavis/match.git"
  },
  "readme": "# Match\n\n[![Build Status](https://travis-ci.org/jrdavis/match.png?branch=master)](https://travis-ci.org/jrdavis/match) [![NPM version](https://badge.fury.io/js/mtr-match.png)](https://npmjs.org/package/mtr-match) [![Dependency Status](https://gemnasium.com/jrdavis/match.png)](https://gemnasium.com/jrdavis/match)\n\n[![NPM](https://nodei.co/npm/mtr-match.png)](https://nodei.co/npm/mtr-match/)\n\n\nMatch is a lightweight library for checking that arguments and other values are of the expected type.\n\nThis package was originally the [Match module](https://github.com/meteor/meteor/tree/devel/packages/check) in Meteor. This repo is the code for that package violently ripped out and made to work with normal Node.\n\n**Work in progress.** Don't expect it to work correctly, or at all.\n\nThe docs for the original Meteor version of the module can be found here:  [http://docs.meteor.com/#match](http://docs.meteor.com/#match)\n\n## Installation\n\n    $ npm install mtr-match\n\n## Example\n\n    var Match = require(\"mtr-match\");\n    \n    // Returns true\n    var valid = Match.test(\"testing\", String); \n    \n    Match.check({ name: \"Danny Dyer\" }, { name: String });\n    Match.check(\"Hello, World\", String);\n\nMethods\n-------\n\n##### ```Match.check(value, pattern)```\n\nChecks that a value matches a pattern. If the value does not match the pattern, throws a Match.Error.\n\n**Arguments:**\n\n**value**: The value to check\n\n**pattern**: The pattern to match value against\n\n##### ```Match.test(value, pattern)```\n\nReturns true if the value matches the pattern.\n\n**Arguments:**\n\n**value**: The value to check\n\n**pattern**: The pattern to match value against\n\n---\n\nIf the match fails, check throws a Match.Error describing how it failed.\n\nMatch Patterns\n--------------\n\nThe following patterns can be used as pattern arguments to check and Match.test:\n\n##### ```Match.Any```\n\nMatches any value.\n\n##### ```String```, ```Number```, ```Boolean```, ```undefined```, ```null```\n\nMatches a primitive of the given type.\n\n##### ```Match.Any```\n\nMatches a signed 32-bit integer. Doesn't match ```Infinity```, ```-Infinity```, or ```NaN```.\n\n##### ```[pattern]```\n\nA one-element array matches an array of elements, each of which match pattern. For example, [```Number```] matches a (possibly empty) array of numbers; [```Match.Any```] matches any array.\n\n##### ```{key1: pattern1, key2: pattern2, ...}```\n\nMatches an Object with the given keys, with values matching the given patterns. If any pattern is a Match.Optional, that key does not need to exist in the object. The value may not contain any keys not listed in the pattern. The value must be a plain Object with no special prototype.\n\n##### ```Match.ObjectIncluding({key1: pattern1, key2: pattern2, ...})```\n\nMatches an Object with the given keys; the value may also have other keys with arbitrary values.\n\n##### ```Object```\n\nMatches any plain Object with any keys; equivalent to ```Match.ObjectIncluding({})```.\n\n##### ```Match.Optional(pattern)```\n\nMatches either ```undefined``` or something that matches pattern. If used in an object this matches only if the key is not set as opposed to the value being set to ```undefined```.\n    \n    // In an object\n    var pat = { name: Match.Optional(String) };\n    Match.check({ name: \"something\" }, pat) // OK\n    Match.check({}, pat) // OK\n    Match.check({ name: undefined }, pat) // Throws an exception\n    \n    // Outside an object\n    Match.check(undefined, Match.Optional(String)); // OK\n\n##### ```Match.OneOf(pattern1, pattern2, ...)```\n\nMatches any value that matches at least one of the provided patterns.\n\n##### Any constructor function (eg, Date)\n\nMatches any element that is an instance of that type.\n\n##### ```Match.Where(condition)```\n\nCalls the function condition with the value as the argument. If condition returns true, this matches. If condition throws a Match.Error or returns false, this fails. If condition throws any other error, that error is thrown from the call to check or Match.test. \n\nExamples:\n    \n    Match.check(buffer, Match.Where(EJSON.isBinary));\n    \n    NonEmptyString = Match.Where(function (x) {\n      check(x, String);\n      return x.length > 0;\n    });\n    Match.check(arg, NonEmptyString);\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Meteor Development Group and Josh-Ryan Davis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "description": "[![Build Status](https://travis-ci.org/jrdavis/match.png?branch=master)](https://travis-ci.org/jrdavis/match) [![NPM version](https://badge.fury.io/js/mtr-match.png)](https://npmjs.org/package/mtr-match) [![Dependency Status](https://gemnasium.com/jrdavis/match.png)](https://gemnasium.com/jrdavis/match)",
  "bugs": {
    "url": "https://github.com/jrdavis/match/issues"
  },
  "_id": "mtr-match@0.0.4",
  "dist": {
    "shasum": "22b90ece9ff1d2a725247d2300931663145e0ccb",
    "tarball": "https://registry.npmjs.org/mtr-match/-/mtr-match-0.0.4.tgz"
  },
  "_from": "mtr-match@0.0.4",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "jrdavis",
    "email": "joshryandavis@me.com"
  },
  "maintainers": [
    {
      "name": "jrdavis",
      "email": "joshryandavis@me.com"
    }
  ],
  "_shasum": "22b90ece9ff1d2a725247d2300931663145e0ccb",
  "_resolved": "https://registry.npmjs.org/mtr-match/-/mtr-match-0.0.4.tgz",
  "homepage": "https://github.com/jrdavis/match#readme"
}
